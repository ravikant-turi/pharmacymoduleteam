<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <class name="com.infinite.jsf.recipient.model.Recipient" table="recipient">
        <id name="hId" type="string">
            <column name="h_id" />
        </id>

        <property name="firstName" type="java.lang.String">
            <column name="first_name" />
        </property>

        <property name="lastName" type="java.lang.String">
            <column name="last_name" />
        </property>

        <property name="mobile" type="java.lang.String">
            <column name="mobile" />
        </property>

        <property name="userName" type="java.lang.String">
            <column name="user_name" />
        </property>

        <property name="gender">
            <column name="gender" />
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">com.infinite.jsf.recipient.model.Gender</param>
                <param name="type">12</param>
            </type>
        </property>

        <property name="dob" type="date">
            <column name="dob" />
        </property>

        <property name="address" type="java.lang.String">
            <column name="address" />
        </property>

        <property name="createdAt" type="timestamp">
            <column name="created_at" />
        </property>

        <property name="password" type="java.lang.String">
            <column name="password" />
        </property>

        <property name="email" type="java.lang.String">
            <column name="email" />
        </property>

        <property name="status">
            <column name="status" />
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">com.infinite.jsf.recipient.model.RecipientStatus</param>
                <param name="type">12</param>
            </type>
        </property>

        <property name="loginAttempts" type="int">
            <column name="login_attempts" />
        </property>

        <property name="lockedUntil" type="timestamp">
            <column name="locked_until" />
        </property>

        <property name="lastLogin" type="timestamp">
            <column name="last_login" />
        </property>

        <property name="passwordUpdatedAt" type="timestamp">
            <column name="password_updated_at" />
        </property>

        <!-- One-to-Many: recipient -> subscribe -->
        <set name="subscriptions" table="subscribe" inverse="true" lazy="true" cascade="all">
            <key>
                <column name="h_id"/>
            </key>
            <one-to-many class="com.infinite.jsf.insurance.model.Subscribe"/>
        </set>

        <!-- One-to-Many: recipient -> medical_procedure -->
        <set name="procedures" table="medical_procedure" inverse="true" lazy="true" cascade="all">
            <key>
                <column name="h_id"/>
            </key>
            <one-to-many class="com.infinite.jsf.provider.model.MedicalProcedure"/>
        </set>

        <!-- One-to-Many: recipient -> claims -->
        <set name="claims" table="claims" inverse="true" lazy="true" cascade="all">
            <key>
                <column name="h_id"/>
            </key>
            <one-to-many class="com.infinite.jsf.provider.model.Claims"/>
        </set>
    </class>
   <sql-query name="PatientInsuranceDetails.findByRecipientId">
    <return-scalar column="subscribeId" type="string"/>
    <return-scalar column="hId" type="string"/>
    <return-scalar column="patientName" type="string"/>
    <return-scalar column="companyName" type="string"/>
    <return-scalar column="planName" type="string"/>
    <return-scalar column="enrollmentDate" type="date"/>
    <return-scalar column="coverageStartDate" type="date"/>
    <return-scalar column="coverageEndDate" type="date"/>
    <return-scalar column="coverageStatus" type="string"/>
    <return-scalar column="coverageType" type="string"/>
    <return-scalar column="coverageLimit" type="double"/>
    <return-scalar column="remaining" type="double"/>
    <return-scalar column="claimed" type="double"/>
    <return-scalar column="lastClaimDate" type="date"/>

    <![CDATA[
       SELECT 
    s.subscribe_id AS subscribeId,
    r.h_id AS hId,
    CONCAT(r.first_name, ' ', r.last_name) AS patientName,
    ic.name AS companyName,
    ip.plan_name AS planName,
    s.subscribe_date AS enrollmentDate,
    s.subscribe_date AS coverageStartDate,
    s.expiry_date AS coverageEndDate,
    s.status AS coverageStatus,
    s.`type` AS coverageType,
    ico.coverage_amount AS coverageLimit,
    (ico.coverage_amount - COALESCE(SUM(c.amount_approved), 0)) AS remaining,
    COALESCE(SUM(c.amount_approved), 0) AS claimed,
    MAX(c.claim_date) AS lastClaimDate
FROM subscribe s
JOIN insurance_coverage_option ico ON s.coverage_id = ico.coverage_id
JOIN insurance_plan ip ON ico.plan_id = ip.plan_id
JOIN insurance_company ic ON ip.company_id = ic.company_id
JOIN recipient r ON s.h_id = r.h_id
LEFT JOIN claims c ON c.subscribe_id = s.subscribe_id AND c.h_id = r.h_id
WHERE r.h_id = :hId
GROUP BY s.subscribe_id, r.h_id, r.first_name, r.last_name, ic.name, ip.plan_name,
         s.subscribe_date, s.expiry_date, s.status, s.`type`, ico.coverage_amount

    ]]>
</sql-query>



    
</hibernate-mapping>
